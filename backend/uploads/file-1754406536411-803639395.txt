soient
A1 , A2 , A3 , p : arb ;
Inordre , preordre , postordre : Action ;
Suiv_Inordre , Suiv_Preordre , Suiv_Postordre : Fonction(arb) ;
Premier_Inordre , Premier_Preordre , Premier_Postordre : Fonction(arb) ;
Creer_ar , random_tree , Rech , Liberer_ar: Action ;
Fusion_In_Pre , Fusion_In_Post , Fusion_Pre_Pre , Fusion_Post_Post , Fusion_Pre_Post : Action  ;
i , j : entier ;

Debut
 ecrire('Bienvenue dans le TP ALGO03 !!');
 ecrire('On espère de pouvoir vous montrer nos efforts avec ce programme');
 ecrire('                          Réalisé par : Tati Youcef//Hamroun Mohamed Ali//Section B : G05');
 ecrire('');
 ecrire('');
 ecrire('');
 ecrire('');

  Pour i:=1,10
  ecrire('***Génération de A1***');
  appel random_tree(A1,5) ;
  ecrire('voici A1 en preordre :') ;
  appel Preordre(A1) ;
  ecrire('voici A1 en inordre :') ;
  appel Inordre(A1) ;
  ecrire('voici A1 en postordre :') ;
  appel Postordre(A1) ;

  ecrire('***Génération de A2***');
  appel random_tree(A2,5) ;
  ecrire('voici A2 en preordre :') ;
  appel Preordre(A2) ;
  ecrire('voici A2 en postordre :') ;
  appel Postordre(A2) ;

    Pour j:=1,5
    SI(j = 1)
    ecrire('Fusion In_Pre:');
    appel Fusion_In_Pre(A1,A2,A3);
    ecrire('preparer la validation de cette fusion : ') ;
    ecrire('voici le resultat A3: ') ;
    ecrire('son preordre : ');
    appel Preordre(A3) ;
    ecrire('son inordre : ');
    appel Inordre(A3) ;
    ecrire('son postordre : ');
    appel Postordre(A3) ;
    appel Liberer_ar(A3) ;
    ecrire('Fusion Inordre Preordre terminée');
    ecrire('--------------------------------------------------------------');
    SINON
      SI(j = 2)
      ecrire('Fusion In_Post:');
      appel Fusion_In_Post(A1,A2,A3);
      ecrire('preparer la validation de cette fusion : ') ;
      ecrire('voici le resultat A3: ') ;
      ecrire('son preordre : ');
      appel Preordre(A3) ;
      ecrire('son inordre : ');
      appel Inordre(A3) ;
      ecrire('son postordre : ');
      appel Postordre(A3) ;
      appel Liberer_ar(A3) ;
      ecrire('Fusion Inordre Postordre terminée');
      ecrire('--------------------------------------------------------------');
      SINON
        SI(j = 3)
        ecrire('Fusion Pre_Pre:');
        appel Fusion_Pre_Pre(A1,A2,A3);
        ecrire('preparer la validation de cette fusion : ') ;
        ecrire('voici le resultat A3: ') ;
        ecrire('son preordre : ');
        appel Preordre(A3) ;
        ecrire('son inordre : ');
        appel Inordre(A3) ;
        ecrire('son postordre : ');
        appel Postordre(A3) ;
        appel Liberer_ar(A3) ;
        ecrire('Fusion Preordre Preordre terminée');
        ecrire('--------------------------------------------------------------');
        SINON
          SI(j = 4)
          ecrire('Fusion Post_Post:');
          appel Fusion_Post_Post(A1,A2,A3);
          ecrire('preparer la validation de cette fusion : ') ;
          ecrire('voici le resultat A3: ') ;
          ecrire('son preordre : ');
          appel Preordre(A3) ;
          ecrire('son inordre : ');
          appel Inordre(A3) ;
          ecrire('son postordre : ');
          appel Postordre(A3) ;
          appel Liberer_ar(A3) ;
          ecrire('Fusion Postordre Postordre terminée');
          ecrire('--------------------------------------------------------------');
          SINON
          ecrire('Fusion Pre_Post:');
          appel Fusion_Pre_Post(A1,A2,A3);
          ecrire('preparer la validation de cette fusion : ') ;
          ecrire('voici le resultat A3: ') ;
          ecrire('son preordre : ');
          appel Preordre(A3) ;
          ecrire('son inordre : ');
          appel Inordre(A3) ;
          ecrire('son postordre : ');
          appel Postordre(A3) ;
          appel Liberer_ar(A3) ;
          ecrire('Fusion Preordre Postordre terminée');
          ecrire('--------------------------------------------------------------');
          FSI
        FSI
      FSI
    FSI
    FPour ;
  appel Liberer_ar(A1) ;
  appel Liberer_ar(A2) ;
  ecrire('iteration numero ',i,'terminée**************************************************************') ;

  FPour
Fin

Action Liberer_ar(rac)
soient
rac , p , q des arb ;

Debut
 SI(rac # NIL)
   SI((fd(rac)=NIL) ET (fg(rac)=NIL))
   Liberernoeud(rac) ;
   SINON
     SI((fd(rac)#NIL) ET (fg(rac)#NIL))
     appel Liberer_ar(fd(rac));
     appel Liberer_ar(fg(rac));
     Liberernoeud(rac) ;
     SINON
       SI(fd(rac)#NIL)
       appel Liberer_ar(fd(rac));
       Liberernoeud(rac) ;
       SINON
       appel Liberer_ar(fg(rac));
       Liberernoeud(rac) ;
       FSI
     FSI
   FSI ;
   rac := NIL ;
 FSi
Fin

Action Creer_ar(racine , x)
soient
racine , r : arb ;
x un entier ;

Debut
  SI(racine = NIL)
  Creernoeud(racine);
  aff_info(racine , x);
  SINON
    SI(x <= info(racine))
    r := fg(racine) ;
    appel Creer_ar(r , x) ;
    aff_fg(racine , r) ;
    SINON
    r := fd(racine) ;
    appel Creer_ar(r , x) ;
    aff_fd(racine , r) ;
    FSI
  FSI
Fin

Action Rech(racine , v , per , q)
soient
racine , per , q : arb ;
tr : booleen ;
v : entier ;

debut
 tr := faux ;
per := NIL ;
q   := racine ;
 TQ(q # NIL) ET (tr = faux)
  SI(v = info(q)) tr := vrai ;
  SINON
    per := q ;
    SI(v < info(q)) q := fg(q);
    SINON q := fd(q) ;
    FSI
  FSI
 FTQ
fin

Action random_tree(rac , nb_data)
soient
rac , p , q : arb ;
nb_data , cpt , x des entiers  ;

debut
 cpt := 0 ;
 TQ(cpt < nb_data)
  x := aleanombre(100) ;
  appel Rech(rac , x , p , q) ;
    SI(q = NIL)
    appel Creer_ar(rac,x) ;
    cpt := cpt + 1 ;
    FSI
 FTQ
Fin

Fonction Suiv_Inordre(racine , v) : arb
soient
racine , p , q , t des arb ;
v un entier ;
Pi une pile de arb ;
tr un BOOLEEN ;

Debut
Creerpile(Pi) ;
appel Rech(racine , v , p , q) ;
  Si(q = NIL) Suiv_Inordre := NIL ;
  Sinon
   SI(fd(q) # NIL)
    t := fd(q) ;
     TQ(fg(t) # NIL) t := fg(t) ;
     FTQ ;
     Suiv_Inordre := t ;
   SINON
   t := racine ;
   p := NIL ;
   tr := faux ;
    TQ(tr = faux)
     SI(t = q) tr := vrai ;
     FSI ;
     SI(info(q) < info(t))
      p := t ;
      t := fg(t) ;
     FSI ;
     SI(info(q) > info(t))
       SI(p = NIL)
        p := t ;
        t := fd(t) ;
       SINON
        SI(fg(p) = t) Empiler(Pi , p);
        FSI ;
        p := t ;
        t := fd(t) ;
       FSI
      FSI
     FTQ  ;
     SI(p = NIL) Suiv_Inordre := NIL ;
     SINON
      SI(fd(p) = t)
       SI(Pilevide(Pi)) Suiv_Inordre := NIL ;
       SINON
       Depiler(Pi , t) ;
       Suiv_Inordre := t ;
       FSI
     SINON
     Suiv_Inordre := p ;
     FSI
     FSI
    FSI
   FSI
Fin

Fonction Suiv_Preordre(racine , v) : arb
soient
racine , p , q , t des arb;
v un entier ;
Pi une Pile de arb ;
tr un Booleen ;

Debut
 Creerpile(Pi) ;
 appel Rech(racine , v , p , q) ;
   SI(q = NIL) Suiv_Preordre := NIL ;
   SINON
     SI(fg(q) # NIL) Suiv_Preordre := fg(q) ;
     SINON
     t := racine ;
     tr := faux ;
       TQ(tr = faux)
         SI(fd(t) # NIL) Empiler(Pi , fd(t)) ;
         FSI ;
         SI(t = q) tr := vrai ;
         SINON
           SI(info(q) < info(t)) t := fg(t) ;
           SINON
           Depiler(Pi , t) ;
           FSI
         FSI
       FTQ ;
       SI(Pilevide(Pi)) Suiv_Preordre := NIL ;
       SINON
       Depiler(Pi , t) ;
       Suiv_Preordre := t ;
       FSI
     FSI
   FSI
Fin

Fonction Suiv_Postordre(racine , v) : arb
soient
racine , p , q des arb ;
v un entier ;
Debut
 appel Rech(racine , v , p , q) ;
   SI(q = NIL) Suiv_Postordre := NIL ;
   SINON
     SI(p = NIL) Suiv_Postordre := NIL ;
     SINON
       SI((fd(p) = q) OU (fd(p) = NIL)) Suiv_Postordre := p ;
       SINON
         TQ((fd(fd(p))#NIL) ET (fg(fd(p))=NIL)) p:= fd(p) ;
         FTQ ;
       p := Suiv_Inordre(racine,info(p));
         TQ(fd(p)#NIL) p := Suiv_Inordre(racine,info(p));
         FTQ ;
       Suiv_Postordre := p ;
       FSI
     FSI
   FSI
Fin

Fonction Premier_Inordre(racine) : arb
soient
racine , p des arb ;

Debut
 p := racine ;
   TQ(fg(p)#NIL) p := fg(p) ;
   FTQ ;
 Premier_Inordre := p ;
Fin

Fonction Premier_Preordre(racine) : arb
soient
racine un arb ;

Debut
 Premier_Preordre := racine ;
Fin

Fonction Premier_Postordre(racine) : arb
soient
racine , p des arb ;
tr un Booleen ;

Debut
 p := racine ;
 tr := faux ;
   TQ(tr = faux)
     TQ(fg(p)#NIL) p:=fg(p) ;
     FTQ  ;
     SI(fd(p)#NIL) p:=fd(p) ;
     SINON tr := vrai ;
     FSI
   FTQ ;
 Premier_Postordre := p ;
Fin

Action Fusion_In_Pre(T1 , T2 , T3)
soient
T1 , T2 , T3 , p , q : arb ;
x , y , Mini des entiers ;
Debut
 p:=Premier_Inordre(T1) ;
 q:=Premier_Preordre(T2) ;
   TQ((p#NIL) OU (q#NIL))
     SI((p#NIL) ET (q#NIL))
     x:=info(p) ;
     y:=info(q) ;
       SI(x < y)
       Mini := x ;
       p := Suiv_Inordre(T1 , info(p)) ;
       SINON
       Mini := y ;
       q := Suiv_Preordre(T2 , info(q)) ;
       FSI
     SINON
       SI(p#NIL)
       Mini := info(p) ;
       p := Suiv_Inordre(T1 , info(p)) ;
       SINON
       Mini := info(q) ;
       q := Suiv_Preordre(T2 , info(q)) ;
       FSI
     FSI ;
   appel Creer_ar(T3,Mini) ;
   FTQ
Fin

Action Fusion_In_Post(T1 , T2 , T3)
soient
T1 , T2 , T3 , p , q : arb ;
x , y , Mini des entiers ;
Debut
 p:=Premier_Inordre(T1) ;
 q:=Premier_Postordre(T2) ;
   TQ((p#NIL) OU (q#NIL))
     SI((p#NIL) ET (q#NIL))
     x:=info(p) ;
     y:=info(q) ;
       SI(x < y)
       Mini := x ;
       p := Suiv_Inordre(T1 , info(p)) ;
       SINON
       Mini := y ;
       q := Suiv_Postordre(T2 , info(q)) ;
       FSI
     SINON
       SI(p#NIL)
       Mini := info(p) ;
       p := Suiv_Inordre(T1 , info(p)) ;
       SINON
       Mini := info(q) ;
       q := Suiv_Postordre(T2 , info(q)) ;
       FSI
     FSI ;
   appel Creer_ar(T3,Mini) ;
   FTQ
Fin

Action Fusion_Pre_Pre(T1 , T2 , T3)
soient
T1 , T2 , T3 , p , q : arb ;
x , y , Mini des entiers ;
Debut
 p:=Premier_Preordre(T1) ;
 q:=Premier_Preordre(T2) ;
   TQ((p#NIL) OU (q#NIL))
     SI((p#NIL) ET (q#NIL))
     x:=info(p) ;
     y:=info(q) ;
       SI(x < y)
       Mini := x ;
       p := Suiv_Preordre(T1 , info(p)) ;
       SINON
       Mini := y ;
       q := Suiv_Preordre(T2 , info(q)) ;
       FSI
     SINON
       SI(p#NIL)
       Mini := info(p) ;
       p := Suiv_Preordre(T1 , info(p)) ;
       SINON
       Mini := info(q) ;
       q := Suiv_Preordre(T2 , info(q)) ;
       FSI
     FSI ;
   appel Creer_ar(T3,Mini) ;
   FTQ
Fin

Action Fusion_Post_Post(T1 , T2 , T3)
soient
T1 , T2 , T3 , p , q : arb ;
x , y , Mini des entiers ;
Debut
 p:=Premier_Postordre(T1) ;
 q:=Premier_Postordre(T2) ;
   TQ((p#NIL) OU (q#NIL))
     SI((p#NIL) ET (q#NIL))
     x:=info(p) ;
     y:=info(q) ;
       SI(x < y)
       Mini := x ;
       p := Suiv_Postordre(T1 , info(p)) ;
       SINON
       Mini := y ;
       q := Suiv_Postordre(T2 , info(q)) ;
       FSI
     SINON
       SI(p#NIL)
       Mini := info(p) ;
       p := Suiv_Postordre(T1 , info(p)) ;
       SINON
       Mini := info(q) ;
       q := Suiv_Postordre(T2 , info(q)) ;
       FSI
     FSI ;
   appel Creer_ar(T3,Mini) ;
   FTQ
Fin

Action Fusion_Pre_Post(T1 , T2 , T3)
soient
T1 , T2 , T3 , p , q : arb ;
x , y , Mini des entiers ;
Debut
 p:=Premier_Preordre(T1) ;
 q:=Premier_Postordre(T2) ;
   TQ((p#NIL) OU (q#NIL))
     SI((p#NIL) ET (q#NIL))
     x:=info(p) ;
     y:=info(q) ;
       SI(x < y)
       Mini := x ;
       p := Suiv_Preordre(T1 , info(p)) ;
       SINON
       Mini := y ;
       q := Suiv_Postordre(T2 , info(q)) ;
       FSI
     SINON
       SI(p#NIL)
       Mini := info(p) ;
       p := Suiv_Preordre(T1 , info(p)) ;
       SINON
       Mini := info(q) ;
       q := Suiv_Postordre(T2 , info(q)) ;
       FSI
     FSI ;
   appel Creer_ar(T3,Mini) ;
   FTQ
Fin

Action Inordre(rac)
soient
rac : arb;

debut
 Si rac # Nil
  Appel Inordre(fg(rac));
  ecrire(info(rac));
  Appel Inordre(fd(rac));
 FSI
Fin

Action Preordre(rac)
soient
rac : arb;

debut
 Si rac <> Nil
  ecrire(info(rac));
  Appel Preordre(fg(rac));
  Appel Preordre(fd(rac));
 FSI
Fin

Action Postordre(rac)
soient
rac : arb;

debut
 Si rac <> Nil
  Appel Postordre(fg(rac));
  Appel Postordre(fd(rac));
  ecrire(info(rac));
 FSI
Fin
